%{
#include <stdio.h>
#include <assert.h>
#include <stdlib.h>
#include <string.h>
#include "node.h"
#include "tabid.h"
#include "postfix.h"


/*
TODO: Variaveis globais (hoje a noite) (done except const str)
			Ponteiros (sabado)
			Otimizacoes (amanha fazer em ES e antes do autocarro)
			Felicidade (TBD)
*/


/*for cycles*/
typedef struct double_lbl {
	int b_lbl;
	int e_lbl;
} doublelbl;

static doublelbl lbls[100];
static int dblcnt = 0;
extern FILE *outfp;
char *dupstr(const char *s);

static long brklbl[20], brkcnt; /* break labels */
/* label _L0 is a break without a while/switch) */

static char *extrns[100]; /* emit externs at the end only */
static int extcnt;
extern int localPos;
int functionReturnType;
extern int placeofReturn;

int lbl;
char *mklbl(int n) {
  static char buf[20];
  sprintf(buf, "_i%d", n);
  return strcpy(malloc(strlen(buf)+1),buf);
}

static void outstr(char *s) {
  while (*s) fprintf(outfp, pfCHAR, (unsigned char)*s++);
  fprintf(outfp, pfCHAR, 0);
}

static void mkdouble(double d) {
	lbl++; fprintf(outfp, pfRODATA pfALIGN pfLABEL pfDOUBLE, mklbl(lbl), d);
					fprintf(outfp, pfTEXT pfADDR pfLOAD2, mklbl(lbl));
}

static void mkint(int i) {
	lbl++; fprintf(outfp, pfRODATA pfALIGN pfLABEL pfINTEGER, mklbl(lbl), i);
					fprintf(outfp, pfTEXT pfADDR pfLOAD, mklbl(lbl));
}

static char *mkfunc(char *s) {
  static char buf[80];
  strcpy(buf, "_");
  strcat(buf, s);
  return buf;
}


/*all pointers are integers*/
int isInt(Node* p) {return ((p->info == 1) || (p->info == 6) || (p->info > 10 )) ? 1 : MAX_COST;}
int isReal(Node* p) {return((p->info == 3) || (p->info == 8)) ? 1 : MAX_COST;}
int isString(Node* p) {return ((p->info == 2) || (p->info == 7)) ? 1 : MAX_COST;}
int isVoid(Node* p) {return (p->info == 4) ? 1 : MAX_COST;}

int compareNodeLeft(Node* p) {return compareNode(LEFT_CHILD(LEFT_CHILD(LEFT_CHILD(p))), RIGHT_CHILD(p), 0) ? MAX_COST : 1;}
int compareNodeRight(Node* p) {return compareNode(LEFT_CHILD(RIGHT_CHILD(LEFT_CHILD(p))), RIGHT_CHILD(p), 0) ? MAX_COST : 1;}


%}
%term INSTR=';' BLOCK='{' ARGB='(' NEXT=','
%term FACTORIAL='!' ADD='+' SUB='-' MUL='*' DIV='/' MOD='%'
%term LT='<' GT='>' LOGIC_EQUAL='=' AND='&' OR='|' LOGIC_NOT='~'
%term INDEX='['
%include "y.tab.h"
%%

finit: ARGB(bloco, params) 1 {if (functionReturnType != 4) {if (functionReturnType != 3)fprintf(outfp, pfLOCAL pfLOAD pfPOP, -4);
															else if(functionReturnType == 3) fprintf(outfp, pfLOCAL pfLOAD2 pfDPOP, -8);}}
finit: ARGB(bloco, NIL) 1 {if (functionReturnType != 4) {if (functionReturnType != 3)fprintf(outfp, pfLOCAL pfLOAD pfPOP, -4);
															else if(functionReturnType == 3) fprintf(outfp, pfLOCAL pfLOAD2 pfDPOP, -8);}}

params: param
params:NEXT(params, param)

bloco: BLOCK(list, decls)
bloco: BLOCK(INSTR(list, stmt), decls)

decls: INSTR(decls, param)
decls: NONE

param: PARAM(tipo, ID)

tipo: INTEGER
tipo: STRING
tipo: NUMBER

%! one or more complete expressions
list: base
list: LIST(list, base)


%! simple if (no else): uses only one label
if: IF(cond, stmt) 1{fprintf(outfp, pfLABEL, mklbl(LEFT_CHILD(p)->place)); }


%! if-else
ifelse:	ELSE(cond2,stmt)	1 { fprintf(outfp, pfLABEL, mklbl(LEFT_CHILD(p)->place)); }
cond2:	IF(cond,stmt)	1 { p->place = ++lbl; fprintf(outfp, pfJMP pfLABEL,
							mklbl(p->place), mklbl(LEFT_CHILD(p)->place)); }


%! while (do while)
while: WHILE(do, expr) 1 {dblcnt--; brkcnt--; fprintf(outfp, pfJNZ pfLABEL,
						mklbl(lbls[dblcnt].b_lbl), mklbl(lbls[dblcnt].e_lbl)); }
do: DO(begin,stmt) 1 {}
begin: START 1 { fprintf(outfp, pfLABEL, mklbl(++lbl)); lbls[dblcnt].b_lbl = lbl; lbls[dblcnt].e_lbl = ++lbl;
				brklbl[brkcnt++] = lbls[dblcnt++].e_lbl; }


%!for (upto and downto)
for: INSTR(expr, forbody)
forbody: FOR(forin, forinstr)  1{fprintf(outfp, pfLABEL, mklbl(lbls[--dblcnt].e_lbl));}
forinstr: INSTR(forstmt, expr) 1 {fprintf(outfp, pfJMP, mklbl(lbls[dblcnt - 1].b_lbl));}
forstmt: stmt 1 {}
forin: IN(forstart, expr) 1 {fprintf(outfp, pfJZ, mklbl(++lbl)); lbls[dblcnt].e_lbl = lbl; brklbl[brkcnt++] = lbls[dblcnt++].e_lbl;}
forstart: START 1 {fprintf(outfp, pfLABEL, mklbl(++lbl)); lbls[dblcnt].b_lbl = lbl; }


%!stmt is a base or a break
stmt: base
stmt: BREAK 1 { fprintf(outfp, pfJMP, mklbl(brklbl[brkcnt - p->value.i])); }
stmt: CONTINUE 1 { fprintf(outfp, pfJMP, mklbl(brklbl[p->value.i])); }


%!end of an expression is a base
base: expr 1 {if (p->place != 0) fprintf(outfp, pfTRASH, (int)p->place); }
base: if
base: ifelse
base: while
base: for
base: bloco


%!an expression is any type of expression
expr: iexpr {p->place = 4;}
expr: sexpr {p->place = 4;}
expr: rexpr {p->place = 8;}


%!void functions are just expressions
expr: CALL(ID, arguments) isVoid {fprintf(outfp, pfCALL pfTRASH, mkfunc(LEFT_CHILD(p)->value.s),
														 (int)((RIGHT_CHILD(p)->place))); p->place = 0;}
expr: CALL(ID, VOID) isVoid {fprintf(outfp, pfCALL, mkfunc(LEFT_CHILD(p)->value.s));
												p->place = 0;}

%! for index operation
lvec: lval 1 {fprintf(outfp, pfLOAD);}
lval: ilval
lval: rlval
lval: slval


%!lval is an expression on the left side of an assignment
ilval: LOCAL isInt {fprintf(outfp, pfLOCAL, p->value.i * (pfWORD/4));}
ilval: ID isInt {fprintf(outfp, pfADDR, p->value.s);}
ilval: INDEX(lvec, expr) isInt { if (isString(LEFT_CHILD(p)) == 1) fprintf(outfp, pfADD); 
								else fprintf(outfp, pfIMM pfMUL pfADD, 4);}


iassign: iexpr 1 {fprintf(outfp, pfDUP);}
iassign: rexpr 1 {fprintf(outfp, pfD2I pfDUP);}
iexpr: INT 1 {fprintf(outfp, pfIMM, p->value.i);}
iexpr: ATR(iassign, ilval) 1 {fprintf(outfp, pfSTORE);}
iexpr: ADD(iexpr, iexpr) 1 {fprintf(outfp, pfADD);}
iexpr: SUB(iexpr, iexpr) 1 {fprintf(outfp, pfSUB);}
iexpr: DIV(iexpr, iexpr) 1 {fprintf(outfp, pfDIV);}
iexpr: MOD(iexpr, iexpr) 1 {fprintf(outfp, pfMOD);}
iexpr: MUL(iexpr, iexpr) 1 {fprintf(outfp, pfMUL);}
rexpr: FACTORIAL(iexpr) 1 {fprintf(outfp, pfCALL pfTRASH pfDPUSH, "_factorial", 4);}
iexpr: NOT(iexpr) 1 {fprintf(outfp, pfIMM pfEQ, 0);}
iexpr: UMINUS(iexpr) 1 {fprintf(outfp, pfNEG);}


%!increment and decrement integer only
iexpr: INCR(ilval) 1 {fprintf(outfp, pfDUP pfINCR pfLOAD, 1);}
iexpr: DECR(ilval) 1 {fprintf(outfp, pfDUP pfDECR pfLOAD, 1);}
iexpr: POSINC(ilval) 1 {fprintf(outfp, pfDUP pfLOAD pfSWAP pfINCR, 1);}
iexpr: POSDEC(ilval) 1 {fprintf(outfp, pfDUP pfLOAD pfSWAP pfDECR, 1);}
iexpr: REF(lval) 


%! assign integers to IDS
iexpr: PTR(ilval) isInt {if (LEFT_CHILD(p)->place == 2) { fprintf(outfp, pfLDCHR);}
                        else {fprintf(outfp, pfLOAD);}}                       
iexpr: PTR(PTR(ilval)) isInt {fprintf(outfp, pfLOAD pfLOAD);}
iexpr: PTR(PTR(slval)) isInt {fprintf(outfp, pfLOAD pfLDCHR);}

%!integer expression is a function that returns int
iexpr: CALL(ID, arguments) isInt {fprintf(outfp, pfCALL pfTRASH pfPUSH, mkfunc(LEFT_CHILD(p)->value.s),(int)((RIGHT_CHILD(p)->place))); 
p->place = IDfind(LEFT_CHILD(p)->value.s, NULL) == 3 ? 8: 4;}

iexpr: CALL(ID, VOID) isInt {fprintf(outfp, pfCALL pfPUSH, mkfunc(LEFT_CHILD(p)->value.s));
									p->place = IDfind(LEFT_CHILD(p)->value.s, NULL) == 3 ? 8: 4;}


cmp: iexpr 1 {}
cmp: sexpr 1 {fprintf(outfp, pfLDCHR);}
iexpr: LT(cmp, cmp) 1 {fprintf(outfp, pfLT);}
iexpr: GT(cmp, cmp) 1 {fprintf(outfp, pfGT);}
iexpr: GE(cmp, cmp) 1 {fprintf(outfp, pfGE);}
iexpr: LE(cmp, cmp) 1 {fprintf(outfp, pfLE);}
iexpr: NE(cmp, cmp) 1 {fprintf(outfp, pfNE);}
iexpr: LOGIC_EQUAL(cmp, cmp) 1 {fprintf(outfp, pfEQ);}
iexpr: AND(cmp, cmp) 1 {fprintf(outfp, pfAND);}
iexpr: OR (cmp, cmp) 1 {fprintf(outfp, pfOR);}
%! comparisons between real expressions return int
iexpr: LT(rexpr, rexpr) 1 {fprintf(outfp, pfDCMP pfIMM pfLT, 0);}
iexpr: GT(rexpr, rexpr) 1 {fprintf(outfp, pfDCMP pfIMM pfGT, 0);}
iexpr: GE(rexpr, rexpr) 1 {fprintf(outfp, pfDCMP pfIMM pfGE, 0);}
iexpr: LE(rexpr, rexpr) 1 {fprintf(outfp, pfDCMP pfIMM pfLE, 0);}
iexpr: LOGIC_EQUAL(rexpr, rexpr) 1 {fprintf(outfp, pfDCMP pfIMM pfEQ, 0);}
iexpr: NE(rexpr, rexpr) 1 {fprintf(outfp, pfDCMP pfIMM pfNE, 0);}


slval: LOCAL isString {fprintf(outfp, pfLOCAL, p->value.i * (pfWORD/4));}
slval: ID isString {fprintf(outfp, pfADDR, p->value.s);}
slval: INDEX(lvec, expr) isString { fprintf(outfp, pfIMM pfMUL pfADD, 4);}
%! expressions relating to strings
sexpr:	STR	1	{	lbl++; fprintf(outfp, pfRODATA pfALIGN pfLABEL, mklbl(lbl));
					outstr(p->value.s); fprintf(outfp, pfTEXT pfADDR, mklbl(lbl));}
sexpr: PTR(slval) isString {fprintf(outfp, pfLOAD);}
sexpr: PTR(PTR(ilval)) isString {fprintf(outfp, pfLOAD pfLOAD);}

sassign: sexpr 1 {fprintf(outfp, pfDUP);}
sassign: iexpr 1 {fprintf(outfp, pfDUP); /*assign to pointer or null (0)*/}
sexpr: ATR(sassign, slval) 1 {fprintf(outfp, pfSTORE);}
sexpr: CALL(ID, arguments) isString {fprintf(outfp, pfCALL pfTRASH pfPUSH, mkfunc(LEFT_CHILD(p)->value.s),
													 (int)((RIGHT_CHILD(p)->place))); p->place = IDfind(LEFT_CHILD(p)->value.s, NULL) == 3 ? 8: 4;}
sexpr: CALL(ID, VOID) isString {fprintf(outfp, pfCALL pfPUSH, mkfunc(LEFT_CHILD(p)->value.s));
							 	p->place = IDfind(LEFT_CHILD(p)->value.s, NULL) == 3 ? 8: 4;}

%! expressions relating to real numbers
rexpr: PTR(rlval) isReal {fprintf(outfp, pfLOAD2);}
rexpr: PTR(PTR(ilval)) isReal {fprintf(outfp, pfLOAD pfLOAD2);}
rlval: LOCAL isReal {fprintf(outfp, pfLOCAL, p->value.i * (pfWORD/4));}
rlval: ID isReal {fprintf(outfp, pfADDR, p->value.s);}
rlval: INDEX(lvec, expr) isReal { fprintf(outfp, pfIMM pfMUL pfADD, 8);}
rexpr: ATR(rassign, rlval) 1 {fprintf(outfp, pfSTORE2);}
rassign: rexpr 1 {fprintf(outfp, pfDUP2);}
rexpr: REAL 1 {lbl++; fprintf(outfp, pfRODATA pfALIGN pfLABEL pfDOUBLE, mklbl(lbl), p->value.r);
					fprintf(outfp, pfTEXT pfADDR pfLOAD2, mklbl(lbl));}
rexpr: ADD(rexpr, rexpr) 1 {fprintf(outfp, pfDADD);}
rexpr: UMINUS(rexpr) 1 {fprintf(outfp, pfDNEG);}
rexpr: SUB(rexpr, rexpr) 1 {fprintf(outfp, pfDSUB);}
rexpr: MUL(rexpr, rexpr) 1 {fprintf(outfp, pfDMUL);}
rexpr: DIV(rexpr, rexpr) 1 {fprintf(outfp, pfDDIV);}
rexpr: iexpr 1 {fprintf(outfp, pfI2D);}
rexpr: CALL(ID, arguments) isReal {fprintf(outfp, pfCALL pfTRASH pfDPUSH, mkfunc(LEFT_CHILD(p)->value.s),
														 (int)((RIGHT_CHILD(p)->place))); p->place = IDfind(LEFT_CHILD(p)->value.s, NULL) == 3 ? 8 : 4;}
rexpr: CALL(ID, VOID) isReal { fprintf(outfp, pfCALL pfDPUSH, mkfunc(LEFT_CHILD(p)->value.s));
									 p->place = IDfind(LEFT_CHILD(p)->value.s, NULL) == 3 ? 8: 4;}


%!Arguments of function calls
arguments: ARGS(expr, NIL) {p->place = LEFT_CHILD(p)->place;}
arguments: ARGS(expr, arguments) {p->place = LEFT_CHILD(p)->place + RIGHT_CHILD(p)->place;}


expr:	AND(and,iexpr)	1 { fprintf(outfp, pfLABEL, mklbl(LEFT_CHILD(p)->place)); }
and:	iexpr		1 { p->place = ++lbl; fprintf(outfp, pfDUP pfJZ pfTRASH, mklbl(p->place), 4); }
expr:	OR(or,iexpr)	1 { fprintf(outfp, pfLABEL, mklbl(LEFT_CHILD(p)->place)); }
or: iexpr 1 { p->place = ++lbl; fprintf(outfp, pfDUP pfJNZ pfTRASH, mklbl(p->place), 4); }


%!otimizacoes condicoes
cond: LT(cmp, cmp) 1 {p->place = ++lbl; fprintf(outfp, pfJGE, mklbl(p->place));}
cond: GT(cmp, cmp) 1 {p->place = ++lbl; fprintf(outfp, pfJLE, mklbl(p->place));}
cond: LE(cmp, cmp) 1 {p->place = ++lbl; fprintf(outfp, pfJGT, mklbl(p->place));}
cond: GE(cmp, cmp) 1 {p->place = ++lbl; fprintf(outfp, pfJLT, mklbl(p->place));}
cond: LOGIC_EQUAL(cmp, cmp) 1 {p->place = ++lbl; fprintf(outfp, pfJNE, mklbl(p->place));}
cond: NE(cmp, cmp) 1 {p->place = ++lbl; fprintf(outfp, pfJEQ, mklbl(p->place));}
cond: expr 1 {p->place = ++lbl; fprintf(outfp, pfJZ, mklbl(p->place));}

%! otimizacoes atribuicoes
base: ATR(ADD(PTR(ilval), INT), LOCAL) compareNodeLeft {fprintf(outfp, pfINCR, RIGHT_CHILD(LEFT_CHILD(p))->value.i);}
base: ATR(SUB(PTR(ilval), INT), LOCAL) compareNodeLeft {fprintf(outfp, pfDECR, RIGHT_CHILD(LEFT_CHILD(p))->value.i);}
base: ATR(ADD(INT, PTR(ilval)), LOCAL) compareNodeRight {fprintf(outfp, pfINCR, LEFT_CHILD(LEFT_CHILD(p))->value.i);}


base: ATR(ADD(PTR(ilval), INT), ID) compareNodeLeft {fprintf(outfp, pfINCR, RIGHT_CHILD(LEFT_CHILD(p))->value.i);}
base: ATR(SUB(PTR(ilval), INT), ID) compareNodeLeft {fprintf(outfp, pfDECR, RIGHT_CHILD(LEFT_CHILD(p))->value.i);}
base: ATR(ADD(INT, PTR(ilval)), ID) compareNodeRight {fprintf(outfp, pfINCR, LEFT_CHILD(LEFT_CHILD(p))->value.i);}


base: ATR(ADD(PTR(ilval), INT), INDEX(LOCAL, INT)) compareNodeLeft {fprintf(outfp, pfINCR, RIGHT_CHILD(LEFT_CHILD(p))->value.i);}
base: ATR(SUB(PTR(ilval), INT), INDEX(LOCAL, INT)) compareNodeLeft {fprintf(outfp, pfDECR, RIGHT_CHILD(LEFT_CHILD(p))->value.i);}
base: ATR(ADD(INT, PTR(ilval)), INDEX(LOCAL, INT)) compareNodeRight {fprintf(outfp, pfINCR, LEFT_CHILD(LEFT_CHILD(p))->value.i);}

base: ATR(ADD(PTR(ilval), INT), INDEX(ID, INT)) compareNodeLeft {fprintf(outfp, pfINCR, RIGHT_CHILD(LEFT_CHILD(p))->value.i);}
base: ATR(SUB(PTR(ilval), INT), INDEX(ID, INT)) compareNodeLeft {fprintf(outfp, pfDECR, RIGHT_CHILD(LEFT_CHILD(p))->value.i);}
base: ATR(ADD(INT, PTR(ilval)), INDEX(ID, INT)) compareNodeRight {fprintf(outfp, pfINCR, LEFT_CHILD(LEFT_CHILD(p))->value.i);}



%%
#include "y.tab.h"
extern void yyerror(const char*);
extern char **yynames;
extern int trace;
extern int localCounter;

void externs()
{
  int i;

  for (i = 0; i < extcnt; i++)
    if (extrns[i])
      fprintf(outfp, pfEXTRN, extrns[i]);

  fprintf(outfp, pfEXTRN, "_factorial");
}


void function(int pub, Node *type, char *name, Node *body)
{
	Node *bloco = LEFT_CHILD(body);
	IDpop();
	if (bloco != 0) { /* not a forward declaration */
		long par;
		int fwd = IDfind(name, &par);
		if (fwd > 40) yyerror("duplicate function");
		else {
			IDreplace(fwd+40, name, par);
			fflush(stdout);
  		fprintf(outfp, pfTEXT pfALIGN);
  		if(pub) {
  		 fprintf(outfp, pfGLOBL, mkfunc(name), pfFUNC); 
  		}
  		fprintf(outfp, pfLABEL pfENTER, mkfunc(name), - localPos * (pfWORD/4));
  		functionReturnType = type->value.i;
  		printNode(body, stdout, yynames);
  		yyselect(body);
  		fprintf(outfp, pfLEAVE pfRET); /* just in case ... */
			freeNode(body);
			for (int i = 0; i < extcnt; i++)
		    if (extrns[i] && strcmp(extrns[i], mkfunc(name)) == 0) extrns[i] = 0;
		}
	}
	else {
		char* buffer = (char*) malloc(sizeof(char) * 80);
		*buffer = '\0';
  		strcpy(buffer, "_");
  		strcat(buffer, name);
		extrns[extcnt++] = buffer;
	}
}


void declare(int pub, int cnst, Node *type, char *name, Node *value)
{
  int typ;
  if (!value) {
    if (!pub && cnst) yyerror("local constants must be initialised");

    return;
  }
  if (value->attrib = INT && value->value.i == 0 && type->value.i > 10)
  	return; /* NULL pointer */
  if ((typ = value->info) % 10 > 5) typ -= 5;

  if (type->value.i != typ)
    yyerror("wrong types in initialization");
}

void assign(int pub, int cnst, Node* type, char* name, Node* value) {
	if(pub && !value) {
		/*public variable not initialized must be extern*/
		fprintf(outfp, pfEXTRN, name);
		return;
	}
	if (pub) {
		fprintf(outfp, pfGLOBL, name, pfOBJ);
	}

	char* memseg = 0;

	if (value && cnst) {
	 memseg = pfRODATA;
	}

	else if (value && !cnst) {
		memseg = pfDATA;
	}
	if (memseg) {
		/*cnst must be RODATA*/
		fprintf(outfp, "%s", memseg);
		fprintf(outfp, pfALIGN);
		fprintf(outfp, pfLABEL, name);
		if (value->info == 1) {
			/*integer*/
			fprintf(outfp, pfINTEGER, value->value.i);
		}

		else if (value->info == 3) {
			/*double*/
			fprintf(outfp, pfDOUBLE, value->value.r);
		}
		else if (value->info == 2 || value->info == 7) {
			if(strcmp(memseg, pfRODATA) == 0) {
				outstr(value->value.s);
			}
			else {
			char *l = mklbl(++lbl);
			fprintf(outfp, pfRODATA pfALIGN pfLABEL, l);
			outstr(value->value.s);
			fprintf(outfp, "%s", memseg);
			fprintf(outfp, pfID, l);
			}
		}
		else if (value->info > 10) {
			/*value is an id*/
			fprintf(outfp, pfID, value->value.s);
		}

	}
	else {
		fprintf(outfp, pfBSS pfALIGN pfLABEL pfBYTE, name, type->value.i == 3 ? 8 : 4);

	}
}

