%{
#include <stdio.h>
#include <assert.h>
#include <stdlib.h>
#include <string.h>
#include "node.h"
#include "tabid.h"
#include "postfix.h"

/*for fors*/
typedef struct double_lbl {
	int b_lbl;
	int e_lbl;
} doublelbl;

static doublelbl lbls[100];
static int dblcnt = 0;
extern FILE *outfp;
char *dupstr(const char *s);

static long brklbl[20], brkcnt; /* break labels */
/* label _L0 is a break without a while/switch) */

static char *extrns[100]; /* emit externs at the end only */
static int extcnt;
extern int localPos;

int lbl;
char *mklbl(int n) {
  static char buf[20];
  sprintf(buf, "_i%d", n);
  return strcpy(malloc(strlen(buf)+1),buf);
}

static void outstr(char *s) {
  while (*s) fprintf(outfp, pfCHAR, (unsigned char)*s++);
  fprintf(outfp, pfCHAR, 0);
}

int functionReturnType;

static char *mkfunc(char *s) {
  static char buf[80];
  strcpy(buf, "_");
  strcat(buf, s);
  return buf;
}

int isIntFunction(Node* p) {return p->info == 1 ? 1 : MAX_COST;}
int isInt(Node* p) {return (p->info == 1) ? 1 : MAX_COST;}


int isRealFunction(Node* p) {return p->info == 3 ? 1 : MAX_COST;}
int isReal(Node* p) {return p->info == 3 ? 1 : MAX_COST;}


int isString(Node* p) {return p->info == 2 ? 1 : MAX_COST;}
int isStringFunction(Node* p) {return p->info == 2 ? 1 : MAX_COST;}


int isIntPointer(Node* p) {return p->info == 11 ? 1 : MAX_COST;}

%}
%term INSTR=';' BLOCK='{' ARGB='(' NEXT=','
%term FACTORIAL='!' ADD='+' SUB='-' MUL='*' DIV='/' MOD='%'
%term LT='<' GT='>' LOGIC_EQUAL='=' AND='&' OR='|' LOGIC_NOT='~'
%term INDEX='['
%include "y.tab.h"
%%

finit: ARGB(bloco, params) 1 {if (functionReturnType != 3)fprintf(outfp, pfLOCAL pfLOAD pfPOP, 8);
															else if(functionReturnType == 3) fprintf(outfp, pfLOCAL pfLOAD2 pfDPOP, 8);}
finit: ARGB(bloco, NIL) 1 {if (functionReturnType != 3) fprintf(outfp, pfLOCAL pfLOAD pfPOP, 8);
													 else if(functionReturnType == 3) fprintf(outfp, pfLOCAL pfLOAD2 pfDPOP, 8);}

params: param
params:NEXT(params, param)

bloco: BLOCK(list, decls)

decls: INSTR(decls, param)
decls: NONE

param: PARAM(tipo, ID)

tipo: INTEGER
tipo: STRING
tipo: NUMBER

%! one or more complete expressions
list: base
list: LIST(list, base)

%! simple if (no else): uses only one label
if: IF(cond, stmt) {fprintf(outfp, pfLABEL, mklbl(LEFT_CHILD(p)->place)); }
cond: expr 1 {p->place = ++lbl; fprintf(outfp, pfJZ, mklbl(p->place));}

%! if-else
ifelse:	ELSE(cond2,stmt)	1 { fprintf(outfp, pfLABEL, mklbl(LEFT_CHILD(p)->place)); }
cond2:	IF(cond,stmt)	1 { p->place = ++lbl; fprintf(outfp, pfJMP pfLABEL,
mklbl(p->place), mklbl(LEFT_CHILD(p)->place)); }


%! while (do while)
while: WHILE(do, expr) 1 { brkcnt--; fprintf(outfp, pfJNZ, mklbl(brklbl[brkcnt + 1])); }
do: DO(begin,stmt) 1 {  p->place = LEFT_CHILD(p)->place;}
begin: START 1 { p->place = ++lbl; fprintf(outfp, pfLABEL, mklbl(lbl)); p->place = (brklbl[++brkcnt] = lbl); }


%!for (upto and downto)
for: INSTR(expr, forbody)
forbody: FOR(forin, forinstr)  {fprintf(outfp, pfLABEL, mklbl(lbls[--dblcnt].e_lbl));}
forinstr: INSTR(forstmt, expr) 1 {fprintf(outfp, pfJMP, mklbl(lbls[dblcnt - 1].b_lbl));}
forstmt: stmt 1 {}
forin: IN(forstart, expr) 1 {fprintf(outfp, pfJZ, mklbl(++lbl)); lbls[dblcnt].e_lbl = lbl; brklbl[brkcnt++] = lbls[dblcnt++].e_lbl;}
forstart: START 1 {fprintf(outfp, pfLABEL, mklbl(++lbl)); lbls[dblcnt].b_lbl = lbl; }


%!stmt is a base or a break
stmt: base
stmt: BREAK 1 { fprintf(outfp, pfJMP, mklbl(brklbl[brkcnt - p->value.i])); }
stmt: CONTINUE 1 { fprintf(outfp, pfJMP, mklbl(brklbl[p->value.i])); }

%!end of an expression is a base
base: expr 1 {fprintf(outfp, pfTRASH, (int)p->place); }
base: if
base: ifelse
base: while
base: for
base: bloco


%!an expression is any type of expression
expr: iexpr {p->place = 4;}
expr: sexpr {p->place = 4;}
expr: rexpr {p->place = 8;}

%!any type of function
expr: CALL(ID, arguments) 1 {fprintf(outfp, pfCALL pfTRASH pfPUSH, mkfunc(LEFT_CHILD(p)->value.s),
														 (int)((RIGHT_CHILD(p)->place))); p->place = IDfind(LEFT_CHILD(p)->value.s, NULL) == 3 ? 8: 4;}
expr: CALL(ID, VOID) 1 {fprintf(outfp, pfCALL pfPUSH, mkfunc(LEFT_CHILD(p)->value.s));
												p->place = IDfind(LEFT_CHILD(p)->value.s, NULL) == 3 ? 8: 4;}


%!lval is an expression on the left side of an assignment
ilval: LOCAL isInt {fprintf(outfp, pfLOCAL, p->value.i * (pfWORD/4));}
ilval: ID isInt {fprintf(outfp, pfADDR, p->value.s);}
ilvec: ilval 1 {fprintf(outfp, pfLOAD);}
ilval: INDEX(ilvec, expr) isInt { fprintf(outfp, pfIMM pfMUL pfADD, 4);}
ilval: INDEX(slvec, expr) isInt {fprintf(outfp, pfADD);}

rlval: LOCAL isReal {fprintf(outfp, pfLOCAL, p->value.i * (pfWORD/4));}
rlval: ID isReal {fprintf(outfp, pfADDR, p->value.s);}
rlvec: rlval 1 {fprintf(outfp, pfLOAD);}
rlval: INDEX(rlvec, expr) isReal { fprintf(outfp, pfIMM pfMUL pfADD, 8);}


slval: LOCAL isString {fprintf(outfp, pfLOCAL, p->value.i * (pfWORD/4));}
slval: ID isString {fprintf(outfp, pfADDR, p->value.s);}
slvec: slval 1 {fprintf(outfp, pfLOAD);}

%! expressions relating to strings
sexpr:	STR	1	{	lbl++; fprintf(outfp, pfRODATA pfALIGN pfLABEL, mklbl(lbl));
					outstr(p->value.s); fprintf(outfp, pfTEXT pfADDR, mklbl(lbl));}

sexpr: PTR(slval) 1 {fprintf(outfp, pfLOAD);}

sassign: sexpr 1 {fprintf(outfp, pfDUP);}
sassign: iexpr 1 {fprintf(outfp, pfDUP); /*assign to pointer type*/}

sexpr: ATR(sassign, slval) 1 {fprintf(outfp, pfSTORE);}
sexpr: CALL(ID, arguments) isStringFunction {fprintf(outfp, pfCALL pfTRASH pfPUSH, mkfunc(LEFT_CHILD(p)->value.s),
													 (int)((RIGHT_CHILD(p)->place))); p->place = IDfind(LEFT_CHILD(p)->value.s, NULL) == 3 ? 8: 4;}
sexpr: CALL(ID, VOID) isStringFunction {fprintf(outfp, pfCALL pfPUSH, mkfunc(LEFT_CHILD(p)->value.s));
																			 p->place = IDfind(LEFT_CHILD(p)->value.s, NULL) == 3 ? 8: 4;}


scmp: sexpr {fprintf(outfp, pfLOAD);}
iexpr: LT(scmp, scmp) 1 {fprintf(outfp, pfLT);}
iexpr: GT(scmp, scmp) 1 {fprintf(outfp, pfGT);}
iexpr: GE(scmp, scmp) 1 {fprintf(outfp, pfGE);}
iexpr: LE(scmp, scmp) 1 {fprintf(outfp, pfLE);}
iexpr: NE(scmp, scmp) 1 {fprintf(outfp, pfNE);}
iexpr: LOGIC_EQUAL(scmp, scmp) 1 {fprintf(outfp, pfEQ);}
iexpr: AND(scmp, scmp) 1 {fprintf(outfp, pfAND);}
iexpr: OR (scmp, scmp) 1 {fprintf(outfp, pfOR);}

%! expressions relating to integers
iassign: iexpr 1 {fprintf(outfp, pfDUP);}

%! integer := real number
iassign: rexpr 1 {fprintf(outfp, pfD2I pfDUP);}

iexpr: INT 1 {fprintf(outfp, pfIMM, p->value.i);}
iexpr: ATR(iassign, ilval) 1 {fprintf(outfp, pfSTORE);}
iexpr: ADD(iexpr, iexpr) 1 {fprintf(outfp, pfADD);}
iexpr: SUB(iexpr, iexpr) 1 {fprintf(outfp, pfSUB);}
iexpr: DIV(iexpr, iexpr) 1 {fprintf(outfp, pfDIV);}
iexpr: MOD(iexpr, iexpr) 1 {fprintf(outfp, pfMOD);}
iexpr: MUL(iexpr, iexpr) 1 {fprintf(outfp, pfMUL);}
iexpr: LT(iexpr, iexpr) 1 {fprintf(outfp, pfLT);}
iexpr: GT(iexpr, iexpr) 1 {fprintf(outfp, pfGT);}
iexpr: GE(iexpr, iexpr) 1 {fprintf(outfp, pfGE);}
iexpr: LE(iexpr, iexpr) 1 {fprintf(outfp, pfLE);}
iexpr: NE(iexpr, iexpr) 1 {fprintf(outfp, pfNE);}
iexpr: LOGIC_EQUAL(iexpr, iexpr) 1 {fprintf(outfp, pfEQ);}
iexpr: AND(iexpr, iexpr) 1 {fprintf(outfp, pfAND);}
iexpr: OR (iexpr, iexpr) 1 {fprintf(outfp, pfOR);}
iexpr: FACTORIAL(iexpr) 1 {/*fprintf(outfp)*/ /*FIXME*/}
iexpr: NOT(iexpr) 1 {fprintf(outfp, pfIMM pfEQ, 0);}
iexpr: UMINUS(iexpr) 1 {fprintf(outfp, pfNEG);}
%!iexpr: REF(LOCAL) 1 {fprintf(outfp, pfLOAD)}


%!increment and decrement integer only
iexpr: INCR(ilval) 1 {fprintf(outfp, pfDUP pfINCR pfLOAD, 1);}
iexpr: DECR(ilval) 1 {fprintf(outfp, pfDUP pfDECR pfLOAD, 1);}
iexpr: POSINC(ilval) 1 {fprintf(outfp, pfDUP pfLOAD pfSWAP pfINCR, 1);}
iexpr: POSDEC(ilval) 1 {fprintf(outfp, pfDUP pfLOAD pfSWAP pfDECR, 1);}

%! assign integers to IDS
iexpr: PTR(ilval) 1 {if (LEFT_CHILD(p)->place == 2) { fprintf(outfp, pfLDCHR);}
                        else {fprintf(outfp, pfLOAD);}}

%!integer expression is a function that returns int
iexpr: CALL(ID, arguments) isIntFunction {fprintf(outfp, pfCALL pfTRASH pfPUSH, mkfunc(LEFT_CHILD(p)->value.s), (int)((RIGHT_CHILD(p)->place)));
																					 p->place = IDfind(LEFT_CHILD(p)->value.s, NULL) == 3 ? 8: 4;}

iexpr: CALL(ID, VOID) isIntFunction {fprintf(outfp, pfCALL pfPUSH, mkfunc(LEFT_CHILD(p)->value.s));
																			p->place = IDfind(LEFT_CHILD(p)->value.s, NULL) == 3 ? 8: 4;}



%! comparisons between real expressions return int
iexpr: LT(rexpr, rexpr) 1 {fprintf(outfp, pfDCMP pfIMM pfLT, 0);}
iexpr: GT(rexpr, rexpr) 1 {fprintf(outfp, pfDCMP pfIMM pfGT, 0);}
iexpr: GE(rexpr, rexpr) 1 {fprintf(outfp, pfDCMP pfIMM pfGE, 0);}
iexpr: LE(rexpr, rexpr) 1 {fprintf(outfp, pfDCMP pfIMM pfLE, 0);}
iexpr: LOGIC_EQUAL(rexpr, rexpr) 1 {fprintf(outfp, pfDCMP pfIMM pfEQ, 0);}
iexpr: NE(rexpr, rexpr) 1 {fprintf(outfp, pfDCMP pfIMM pfNE, 0);}
%!iexpr: REF(ilval) 1 {fprintf(outfp, pfLOCAL, LEFT_CHILD(p)->value.i);}


%! is a int pointer
iexpr: REF(ilval)


%! expressions relating to real numbers
rexpr: ATR(rassign, rlval) 1 {fprintf(outfp, pfSTORE2);}
rassign: rexpr 1 {fprintf(outfp, pfDUP2);}
rexpr: REAL 1 {lbl++; fprintf(outfp, pfRODATA pfALIGN pfLABEL pfDOUBLE, mklbl(lbl), p->value.r);
					fprintf(outfp, pfTEXT pfADDR pfLOAD2, mklbl(lbl));}
rexpr: ADD(rexpr, rexpr) 1 {fprintf(outfp, pfDADD);}
rexpr: UMINUS(rexpr) 1 {fprintf(outfp, pfDNEG);}
rexpr: SUB(rexpr, rexpr) 1 {fprintf(outfp, pfDSUB);}
rexpr: MUL(rexpr, rexpr) 1 {fprintf(outfp, pfDMUL);}
rexpr: DIV(rexpr, rexpr) 1 {fprintf(outfp, pfDDIV);}
rexpr: iexpr 1 {fprintf(outfp, pfI2D);}

%!assign reals to IDS
rexpr: PTR(rlval) 1 {fprintf(outfp, pfLOAD2);}

%!real expression is a function that returns real
rexpr: CALL(ID, arguments) isRealFunction {fprintf(outfp, pfCALL pfTRASH pfDPUSH, mkfunc(LEFT_CHILD(p)->value.s),
														 (int)((RIGHT_CHILD(p)->place))); p->place = IDfind(LEFT_CHILD(p)->value.s, NULL) == 3 ? 8: 4;}

rexpr: CALL(ID, VOID) isRealFunction {fprintf(outfp, pfCALL pfDPUSH, mkfunc(LEFT_CHILD(p)->value.s));
																			 p->place = IDfind(LEFT_CHILD(p)->value.s, NULL) == 3 ? 8: 4;}

%!Arguments of function calls
arguments: ARGS(NIL, expr) {p->place = RIGHT_CHILD(p)->place; }
arguments: ARGS(arguments, expr) {p->place = LEFT_CHILD(p)->place + RIGHT_CHILD(p)->place;}


%%
#include "y.tab.h"
extern void yyerror(const char*);
extern char **yynames;
extern int trace;
extern int localCounter;

void externs()
{
  int i;

  for (i = 0; i < extcnt; i++)
    if (extrns[i])
      fprintf(outfp, pfEXTRN, extrns[i]);
}


void function(int pub, Node *type, char *name, Node *body)
{
	Node *bloco = LEFT_CHILD(body);
	IDpop();
	if (bloco != 0) { /* not a forward declaration */
		long par;
		int fwd = IDfind(name, &par);
		if (fwd > 40) yyerror("duplicate function");
		else {
			IDreplace(fwd+40, name, par);
			fflush(stdout);
  		fprintf(outfp, pfTEXT pfALIGN pfGLOBL pfLABEL pfENTER, mkfunc(name), pfFUNC, mkfunc(name), - localPos * (pfWORD/4));
  		functionReturnType = type->value.i;
  		printNode(body, stdout, yynames);
  		yyselect(body);
  		fprintf(outfp, pfLEAVE pfRET); /* just in case ... */
			freeNode(body);
			for (int i = 0; i < extcnt; i++)
		    if (extrns[i] && strcmp(extrns[i], mkfunc(name)) == 0) extrns[i] = 0;
		}
	}
	else {
		char* buffer = (char*) malloc(sizeof(char) * 80);
		*buffer = '\0';
  		strcpy(buffer, "_");
  		strcat(buffer, name);
		extrns[extcnt++] = buffer;
	}
}


void declare(int pub, int cnst, Node *type, char *name, Node *value)
{
  int typ;
  if (!value) {
    if (!pub && cnst) yyerror("local constants must be initialised");

    if (pub ) {
    //	variable is extern
    	fprintf(outfp, pfEXTRN, name);
    }
    //if(!pub && !cnst) {
    //	fprintf(outfp, pfGLOBL pfBSS pfALIGN pfLABEL pfBYTE, name, name ,name);
    //}
    //}
    //}

    return;
  }
  if (value->attrib = INT && value->value.i == 0 && type->value.i > 10)
  	return; /* NULL pointer */
  if ((typ = value->info) % 10 > 5) typ -= 5;
  if (type->value.i != typ)
    yyerror("wrong types in initialization");
}
